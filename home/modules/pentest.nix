# home/modules/pentest.nix
# =============================================================================
# Pentest toolkit (Home Manager, all-in-one)
#
# Purpose
#   • Declaratively install a practical offensive/security toolset at user scope.
#   • Cover common phases: discovery, enumeration, web fuzzing, wordlists,
#     password cracking, protocol tooling, wireless, and GUI analyzers.
#
# Characteristics
#   • Single `home.packages` list for simplicity; no services are started here.
#   • Package presence is guarded per nixpkgs pin to avoid evaluation failures.
#   • Some tools are unfree (e.g., burpsuite); require `allowUnfree = true`.
#   • Wireshark GUI capture typically requires system-level group/permissions;
#     this module only installs binaries.
#
# Notes / expectations
#   • Raw sockets / monitor mode often require root/capabilities; run with care.
#   • Wordlists (seclists) consume disk space; prune locally if required.
#   • System-wide integrations (pcap groups, setcap on binaries, udev rules)
#     belong in a NixOS module, not here.
# =============================================================================
{ lib, pkgs, ... }:

let
  inherit (lib) optional hasAttr getAttr;

  # Utility: include a package name only if it exists in the current nixpkgs.
  # This avoids “attribute not found” on older pins or platforms.
  want = (names:
    builtins.concatLists (map (n: optional (hasAttr n pkgs) (getAttr n pkgs)) names));

  # ---------------------------------------------------------------------------
  # Core CLI: discovery, web fuzzing, wordlists, cracking, traffic, protocols
  # ---------------------------------------------------------------------------
  core = want [
    # --- Recon / enumeration ---
    "nmap"           # network mapper; TCP/UDP scan, scripts (nse)
    "masscan"        # very fast port scanner; internet-scale probing
    "amass"          # DNS OSINT/subdomain enumeration
    "whatweb"        # web technology fingerprinting
    "nuclei"         # template-based vulnerability scanner

    # --- Web fuzzing / discovery ---
    "gobuster"       # directory/DNS/VHost brute-forcing
    "ffuf"           # fast web fuzzer
    "feroxbuster"    # recursive content discovery
    "dirsearch"      # directory brute-forcer (Python)
    "nikto"          # web server scanner (legacy but still useful)

    # --- Web / SQLi ---
    "sqlmap"         # SQL injection automation

    # --- Wordlists & helpers ---
    "seclists"       # curated lists for discovery, brute-forcing, etc.
    "crunch"         # wordlist generator
    "hashid"         # identify hash types

    # --- Password / auth ---
    "john"           # John the Ripper
    "hashcat"        # GPU-accelerated password cracker
    "hashcat-utils"  # utilities for mask/rule processing
    "hydra"          # network login brute-force
    "medusa"         # parallel brute-forcer
    "patator"        # multi-purpose brute-forcer
    "ncrack"         # network auth cracking (Nmap project)

    # --- Network traffic ---
    "tcpdump"        # packet capture (CLI; requires privileges)

    # --- Protocol tooling / miscellany ---
    "impacket"       # Python collection for MS network protocols
    "responder"      # LLMNR/NBNS/MDNS poisoner (network auth capture)
  ];

  # ---------------------------------------------------------------------------
  # Modern internet surface: fast scanners + HTTP/DNS/links helpers
  # (ProjectDiscovery + common ecosystem helpers)
  # ---------------------------------------------------------------------------
  netsec = want [
    "naabu"          # fast port scanner (ProjectDiscovery)
    "httpx"          # HTTP probing, tech detection, status gathering
    "dnsx"           # DNS toolkit (resolving/queries)
    "subfinder"      # passive subdomain discovery
    "katana"         # web crawler (ProjectDiscovery)

    "assetfinder"    # subdomain discovery (Tom Hudson)
    "subjack"        # subdomain takeover detection
    "gau"            # getallurls (wayback/commoncrawl extractor)
    "waybackurls"    # fetch URLs from Wayback Machine
    "httprobe"       # probe working HTTP/HTTPS on host lists
  ];

  # ---------------------------------------------------------------------------
  # Wireless tooling (availability varies by platform)
  # ---------------------------------------------------------------------------
  wireless = want [
    "aircrack-ng"    # 802.11 WEP/WPA/WPA2 cracking tools
    "hcxtools"       # WPA capture/convert tools for hashcat
    "kismet"         # wireless IDS/sniffer
    "bettercap"      # MITM framework (BLE/WiFi/Ethernet)
  ];

  # ---------------------------------------------------------------------------
  # GUI / interactive tooling
  # ---------------------------------------------------------------------------
  gui = want [
    "wireshark"      # GUI packet analyzer (add user to 'wireshark' group system-wide)
    "zaproxy"        # OWASP ZAP (proxy/scanner)
    "mitmproxy"      # intercepting proxy (TUI/Web UI)
    "metasploit"     # Metasploit Framework (large dependency closure)
    "burpsuite"      # Burp Suite Community/Pro (unfree)
  ];

in
{
  # Single consolidated package set. Adjust by removing categories above.
  home.packages = core ++ netsec ++ wireless ++ gui;

  # ---------------------------------------------------------------------------
  # Operational guidance (informational; not executed here)
  # ---------------------------------------------------------------------------
  # • Wireshark capture without root: add user to the 'wireshark' group in NixOS:
  #     users.users.<name>.extraGroups = [ "wireshark" ];
  #     programs.wireshark.enable = true;   # sets up dumpcap capabilities
  #
  # • Monitor mode / wireless capture: ensure appropriate drivers and
  #   capabilities are configured system-wide; some tools require root.
  #
  # • GPU cracking (hashcat): install proper drivers and OpenCL/CUDA runtimes
  #   at the system level; otherwise hashcat may fall back to CPU.
}

